# Set command prompt to '~/working/directory (git-branch)(svn-branch) $'
# export PS1='\w$(scm_ps1) $ ' # \u@\h

export GIT_PS1_SHOWDIRTYSTATE=1         # *=unstaged, +=staged
export GIT_PS1_SHOWSTASHSTATE=1         # $=something stashed
export GIT_PS1_SHOWUNTRACKEDFILES=1     # %=untracked file(s)
export GIT_PS1_SHOWUPSTREAM='verbose'   # <=behind, >=ahead, <>=divergent

help_git_prompt() {
    echo "unstaged (*), staged (+), stashed ($), untracked (%), behind (<), ahead (>), divergent (<>)"
}

export PS1='\u@\h \[\e[1;34m\]\w\[\e[m\]\[\e[0;35m\]$(ps1_scm)\[\e[m\] \[\e[0;31m\]\$\[\e[m\] '


# combines SVN & Git branch information for prompt
# /via http://www.codeography.com/2009/05/26/speedy-bash-prompt-git-and-subversion-integration.html
ps1_scm() {
    local s=
    if [[ $USE_SVN_PROMPT == 1 && -d ".svn" ]]; then
        s="$(ps1_svn)"
    elif [[ $USE_GIT_PROMPT == 1 ]]; then
        #s="$(ps1_git)"
        s="$(__git_ps1 "(%s)")"
    fi
    #if [[ "$s" == '' ]]; then
    #   echo -n ''
    #else
    #   echo -n " $s"
    #fi
    if [[ "$s" != '' ]]; then
        s=" $s"
    fi
    echo -n "$s"
}

# show GIT repo info
ps1_git() {
    local s="$(__git_ps1 "(%s)")"
    #if [[ "$s" != '' ]]; then
        # s="$s[#$(parse_git_rev)]"
        # if [[ $(is_git_dirty) ]]; then
        #   s="$s[*]"
        # fi
        #s="$s$(parse_git_dirty)$(parse_git_ahead)"
    #fi
    echo "$s"
}

# show SVN repo info
ps1_svn() {
    local s=
    if [[ -d ".svn" ]]; then
        s="(svn::$(parse_svn_branch))"
        s="$s[#$(parse_svn_rev)]"
        if [[ "$s" != '' && $(is_svn_dirty) ]]; then
            s="$s[*]"
        fi
    fi
    echo "$s"
}

# Git info for prompt --------------------------------------------------------
parse_git_rev() {
    git rev-parse --short HEAD 2> /dev/null
}

# /via https://github.com/sjl/oh-my-zsh/blob/master/lib/git.zsh
parse_git_dirty() {
    local gitstat=$(git status 2>/dev/null | grep '\(# Untracked\|# Changes\|# Changed but not updated:\)')
    local s=''

    if [[ $(echo ${gitstat} | grep -c "# Changes to be committed:") > 0 ]]; then
        s="${s}+"
    fi

    if [[ $(echo ${gitstat} | grep -c "\(# Untracked files:\|# Changed but not updated:\|# Changes not staged for commit:\)") > 0 ]]; then
        s="${s}?"
    fi

    if [[ $(echo ${gitstat} | grep -v '^$' | wc -l | tr -d ' ') == 0 ]]; then
        s="${s}"
    fi

    if [[ $s != '' ]]; then
        echo -n "[$s]"
    else
        echo -n ''
    fi
}

# Checks if there are commits ahead from remote
# /via https://github.com/sjl/oh-my-zsh/blob/master/lib/git.zsh
parse_git_ahead() {
    # if [[ $(echo "$(git status --short --branch 2> /dev/null)" | grep 'ahead' 2> /dev/null) != '' ]]; then
    if [[ $(echo "$(git log origin/$(__git_ps1 "%s")..HEAD 2> /dev/null)" | grep '^commit' 2> /dev/null) != '' ]]; then
        echo '[ahead]'
    fi
}


# checks whether current git repository is modified or not -------------------
# /via https://github.com/gf3/dotfiles/blob/master/.bash_prompt
is_git_dirty() {
    local not_dirty='nothing to commit (working directory clean)'
    local status=$(git status 2> /dev/null | tail -n1)
    if [[ $status != $not_dirty ]]; then
        echo 1
    fi
}


# SVN info for prompt --------------------------------------------------------
# /via https://github.com/sontek/dotfiles/blob/master/_bashrc
parse_svn_branch() {
    parse_svn_url | sed -e 's#^'"$(parse_svn_repository_root)"'##g' | awk -F / '{print $1 "/" $2}'
}
parse_svn_url() {
    svn info 2>/dev/null | sed -ne 's#^URL: ##p'
}
parse_svn_repository_root() {
    svn info 2>/dev/null | sed -ne 's#^Repository Root: ##p'
}
parse_svn_rev() {
    svn info 2> /dev/null | sed -n 's#^Revision: ##p'
}

# /via https://github.com/sjl/oh-my-zsh/blob/master/plugins/svn/svn.plugin.zsh
is_svn_dirty() {
    local status=$(svn status | grep -E '^\s*[ACDIM!?L]' 2>/dev/null)
    if [[ $status ]]; then
        echo 1
    fi
}
